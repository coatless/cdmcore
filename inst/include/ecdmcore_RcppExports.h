// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_ecdmcore_RCPPEXPORTS_H_GEN_
#define RCPP_ecdmcore_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace ecdmcore {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("ecdmcore", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("ecdmcore", "_ecdmcore_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in ecdmcore");
            }
        }
    }

    inline arma::vec bijectionvector(unsigned int K) {
        typedef SEXP(*Ptr_bijectionvector)(SEXP);
        static Ptr_bijectionvector p_bijectionvector = NULL;
        if (p_bijectionvector == NULL) {
            validateSignature("arma::vec(*bijectionvector)(unsigned int)");
            p_bijectionvector = (Ptr_bijectionvector)R_GetCCallable("ecdmcore", "_ecdmcore_bijectionvector");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_bijectionvector(Shield<SEXP>(Rcpp::wrap(K)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::vec inv_bijectionvector(unsigned int K, double CL) {
        typedef SEXP(*Ptr_inv_bijectionvector)(SEXP,SEXP);
        static Ptr_inv_bijectionvector p_inv_bijectionvector = NULL;
        if (p_inv_bijectionvector == NULL) {
            validateSignature("arma::vec(*inv_bijectionvector)(unsigned int,double)");
            p_inv_bijectionvector = (Ptr_inv_bijectionvector)R_GetCCallable("ecdmcore", "_ecdmcore_inv_bijectionvector");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_inv_bijectionvector(Shield<SEXP>(Rcpp::wrap(K)), Shield<SEXP>(Rcpp::wrap(CL)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

}

#endif // RCPP_ecdmcore_RCPPEXPORTS_H_GEN_
